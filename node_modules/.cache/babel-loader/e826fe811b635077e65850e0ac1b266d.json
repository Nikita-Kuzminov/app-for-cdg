{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\app-for-cdg\\\\src\\\\js\\\\index.js\";\nimport React from \"react\";\nimport '../css/style.css';\nexport default class Board extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.flipCard = event => {\n      if (this.state.lockBoard) return;\n      if (this === this.state.firstCard) return;\n      const target = event.currentTarget;\n      event.target.classList.add('flip'); // const target = event.currentTarget;\n\n      if (!this.state.hasFlippedCard) {\n        this.setState({\n          hasFlippedCard: true,\n          firstCard: target\n        });\n        return;\n      }\n\n      this.setState({\n        secondCard: target\n      }, this.checkForMatch);\n    };\n\n    this.resetBoard = () => {\n      this.setState({\n        hasFlippedCard: false,\n        lockBoard: false,\n        firstCard: null,\n        secondCard: null\n      });\n    };\n\n    this.state = {\n      hasFlippedCard: false,\n      lockBoard: false,\n      firstCard: null,\n      secondCard: null\n    };\n  }\n\n  checkForMatch() {\n    const isMatch = this.state.firstCard.dataset.framework === this.state.secondCard.dataset.framework;\n    isMatch ? this.disableCards() : this.unflipCards();\n  }\n\n  disableCards() {\n    this.state.firstCard.onclick(null);\n    this.state.secondCard.onclick(null);\n    this.resetBoard();\n  }\n\n  unflipCards() {\n    this.setState({\n      lockBoard: true\n    });\n    setTimeout(() => {\n      this.state.firstCard.classList.remove('flip');\n      this.state.secondCard.classList.remove('flip');\n      this.resetBoard();\n    }, 1500);\n  }\n\n  renderCard(src, dataFramework) {\n    return /*#__PURE__*/React.createElement(Card, {\n      imgSrc: src,\n      imgAlt: dataFramework,\n      flipCard: this.flipCard,\n      dataFramework: dataFramework,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 16\n      }\n    });\n  }\n\n  shuffleCards() {\n    const cards = React.Children.toArray(this.props.children);\n    console.log(cards); // cards.forEach(card => {\n    //     let randomPos = Math.floor(Math.random() * 12);\n    //     card.style.order = randomPos;\n    // });\n  }\n\n  componentDidMount() {\n    this.shuffleCards();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"section\", {\n      className: \"memory-game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    }, this.renderCard('img/react.svg', 'React'), this.renderCard('img/react.svg', 'React'), this.renderCard('img/angular.svg', 'Angular'), this.renderCard('img/angular.svg', 'Angular'), this.renderCard('img/ember.svg', 'Ember'), this.renderCard('img/ember.svg', 'Ember'), this.renderCard('img/vue.svg', 'Vue'), this.renderCard('img/vue.svg', 'Vue'), this.renderCard('img/backbone.svg', 'Backbone'), this.renderCard('img/backbone.svg', 'Backbone'), this.renderCard('img/aurelia.svg', 'Aurelia'), this.renderCard('img/aurelia.svg', 'Aurelia'), this.renderCard('img/octocat.svg', 'Octocat'), this.renderCard('img/octocat.svg', 'Octocat'), this.renderCard('img/html.svg', 'Html'), this.renderCard('img/html.svg', 'Html'));\n  }\n\n}\n\nclass Card extends React.Component {\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"memory-card\",\n      onClick: this.props.flipCard,\n      \"data-framework\": this.props.dataFramework,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: this.props.imgSrc,\n      alt: this.props.imgAlt,\n      className: \"front-face\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"img\", {\n      src: \"img/js-badge.svg\",\n      alt: \"Memory card\",\n      className: \"back-face\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }\n    }));\n  }\n\n} // Все работающие функции до добавления реакта\n\n\nconst cards = document.querySelectorAll(\".memory-card\");\nlet hasFlippedCard = false;\nlet lockBoard = false;\nlet firstCard, secondCard;\n\nfunction flipCard() {\n  if (lockBoard) return;\n  if (this === firstCard) return;\n  this.classList.add(\"flip\");\n\n  if (!hasFlippedCard) {\n    hasFlippedCard = true;\n    firstCard = this;\n    return;\n  }\n\n  secondCard = this;\n  checkForMatch();\n}\n\nfunction checkForMatch() {\n  const isMatch = firstCard.dataset.framework === secondCard.dataset.framework;\n  isMatch ? disableCards() : unflipCards();\n}\n\nfunction disableCards() {\n  firstCard.removeEventListener(\"click\", flipCard);\n  secondCard.removeEventListener(\"click\", flipCard);\n  resetBoard();\n}\n\nfunction unflipCards() {\n  lockBoard = true;\n  setTimeout(() => {\n    firstCard.classList.remove(\"flip\");\n    secondCard.classList.remove(\"flip\");\n    resetBoard();\n  }, 1500);\n}\n\nfunction resetBoard() {\n  [hasFlippedCard, lockBoard] = [false, false];\n  [firstCard, secondCard] = [null, null];\n}\n\n(function shuffle() {\n  cards.forEach(card => {\n    let randomPos = Math.floor(Math.random() * 12);\n    card.style.order = randomPos;\n  });\n})();\n\ncards.forEach(card => card.addEventListener(\"click\", flipCard));","map":{"version":3,"sources":["C:/dev/app-for-cdg/src/js/index.js"],"names":["React","Board","Component","constructor","props","flipCard","event","state","lockBoard","firstCard","target","currentTarget","classList","add","hasFlippedCard","setState","secondCard","checkForMatch","resetBoard","isMatch","dataset","framework","disableCards","unflipCards","onclick","setTimeout","remove","renderCard","src","dataFramework","shuffleCards","cards","Children","toArray","children","console","log","componentDidMount","render","Card","imgSrc","imgAlt","document","querySelectorAll","removeEventListener","shuffle","forEach","card","randomPos","Math","floor","random","style","order","addEventListener"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport '../css/style.css';\r\n\r\nexport default class Board extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasFlippedCard: false,\r\n            lockBoard: false,\r\n            firstCard: null,\r\n            secondCard: null\r\n        };\r\n    }\r\n\r\n    flipCard = (event) => {\r\n        if (this.state.lockBoard) return;\r\n        if (this === this.state.firstCard) return;\r\n\r\n        const target = event.currentTarget;\r\n        event.target.classList.add('flip');\r\n        // const target = event.currentTarget;\r\n\r\n        if (!this.state.hasFlippedCard) {\r\n\r\n\r\n            this.setState({\r\n                hasFlippedCard: true,\r\n                firstCard: target\r\n            });\r\n\r\n\r\n            return;\r\n        }\r\n\r\n\r\n        this.setState(\r\n            {\r\n                secondCard: target\r\n            },\r\n            this.checkForMatch\r\n        );\r\n    };\r\n\r\n    checkForMatch() {\r\n        const isMatch = this.state.firstCard.dataset.framework === this.state.secondCard.dataset.framework;\r\n        isMatch ? this.disableCards() : this.unflipCards();\r\n    }\r\n\r\n    disableCards() {\r\n\r\n        this.state.firstCard.onclick(null);\r\n        this.state.secondCard.onclick(null);\r\n\r\n        this.resetBoard();\r\n    }\r\n\r\n    unflipCards() {\r\n        this.setState({\r\n            lockBoard: true\r\n        });\r\n\r\n        setTimeout(() => {\r\n            this.state.firstCard.classList.remove('flip');\r\n            this.state.secondCard.classList.remove('flip');\r\n\r\n            this.resetBoard();\r\n        }, 1500);\r\n    }\r\n\r\n    resetBoard = () => {\r\n        this.setState({\r\n            hasFlippedCard: false,\r\n            lockBoard: false,\r\n            firstCard: null,\r\n            secondCard: null\r\n        });\r\n    };\r\n\r\n    renderCard(src, dataFramework) {\r\n        return <Card imgSrc={src}\r\n                     imgAlt={dataFramework}\r\n                     flipCard={this.flipCard}\r\n                     dataFramework={dataFramework}/>;\r\n    }\r\n\r\n    shuffleCards() {\r\n        const cards = React.Children.toArray(this.props.children);\r\n\r\n        console.log(cards)\r\n        // cards.forEach(card => {\r\n        //     let randomPos = Math.floor(Math.random() * 12);\r\n        //     card.style.order = randomPos;\r\n        // });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.shuffleCards();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section className=\"memory-game\">\r\n                {this.renderCard('img/react.svg', 'React')}\r\n                {this.renderCard('img/react.svg', 'React')}\r\n                {this.renderCard('img/angular.svg', 'Angular')}\r\n                {this.renderCard('img/angular.svg', 'Angular')}\r\n                {this.renderCard('img/ember.svg', 'Ember')}\r\n                {this.renderCard('img/ember.svg', 'Ember')}\r\n                {this.renderCard('img/vue.svg', 'Vue')}\r\n                {this.renderCard('img/vue.svg', 'Vue')}\r\n                {this.renderCard('img/backbone.svg', 'Backbone')}\r\n                {this.renderCard('img/backbone.svg', 'Backbone')}\r\n                {this.renderCard('img/aurelia.svg', 'Aurelia')}\r\n                {this.renderCard('img/aurelia.svg', 'Aurelia')}\r\n                {this.renderCard('img/octocat.svg', 'Octocat')}\r\n                {this.renderCard('img/octocat.svg', 'Octocat')}\r\n                {this.renderCard('img/html.svg', 'Html')}\r\n                {this.renderCard('img/html.svg', 'Html')}\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nclass Card extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"memory-card\" onClick={this.props.flipCard} data-framework={this.props.dataFramework}>\r\n                <img src={this.props.imgSrc} alt={this.props.imgAlt} className=\"front-face\"/>\r\n                <img src=\"img/js-badge.svg\" alt=\"Memory card\" className=\"back-face\"/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// Все работающие функции до добавления реакта\r\n\r\nconst cards = document.querySelectorAll(\".memory-card\");\r\n\r\nlet hasFlippedCard = false;\r\nlet lockBoard = false;\r\nlet firstCard, secondCard;\r\n\r\nfunction flipCard() {\r\n    if (lockBoard) return;\r\n    if (this === firstCard) return;\r\n\r\n    this.classList.add(\"flip\");\r\n\r\n    if (!hasFlippedCard) {\r\n        hasFlippedCard = true;\r\n        firstCard = this;\r\n        return;\r\n    }\r\n\r\n    secondCard = this;\r\n\r\n    checkForMatch();\r\n}\r\n\r\nfunction checkForMatch() {\r\n    const isMatch = firstCard.dataset.framework === secondCard.dataset.framework;\r\n    isMatch ? disableCards() : unflipCards();\r\n}\r\n\r\nfunction disableCards() {\r\n    firstCard.removeEventListener(\"click\", flipCard);\r\n    secondCard.removeEventListener(\"click\", flipCard);\r\n\r\n    resetBoard();\r\n}\r\n\r\nfunction unflipCards() {\r\n    lockBoard = true;\r\n\r\n    setTimeout(() => {\r\n        firstCard.classList.remove(\"flip\");\r\n        secondCard.classList.remove(\"flip\");\r\n\r\n        resetBoard();\r\n    }, 1500);\r\n}\r\n\r\nfunction resetBoard() {\r\n    [hasFlippedCard, lockBoard] = [false, false];\r\n    [firstCard, secondCard] = [null, null];\r\n}\r\n\r\n(function shuffle() {\r\n    cards.forEach(card => {\r\n        let randomPos = Math.floor(Math.random() * 12);\r\n        card.style.order = randomPos;\r\n    });\r\n})();\r\n\r\ncards.forEach(card => card.addEventListener(\"click\", flipCard));\r\n"]},"metadata":{},"sourceType":"module"}